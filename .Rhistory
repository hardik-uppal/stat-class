tau2 = 10
theta0 = 5
n=length(x)
Nsim=10000
result = matrix(nrow = Nsim, ncol = 2)
xbar=mean(x)
sh1=(n/2)+a
sigma2=theta=rep(0,Nsim)
sigma2[1]=1/rgamma(1,shape=a,rate=b)
B=sigma2[1]/(sigma2[1]+n*tau2)
theta[1]=rnorm(1,m=B*theta0+(1-B)*xbar,sd=sqrt(tau2*B))
result[1, ] <- c(theta[1], sigma2[1])
for (i in 2:Nsim){
B=sigma2[i-1]/(sigma2[i-1]+n*tau2)
theta[i]=rnorm(1,m=B*theta0+(1-B)*xbar,sd=sqrt(tau2*B))
ra1=(1/2)*(sum((x-theta[i])^2))+b
sigma2[i]=1/rgamma(1,shape=sh1,rate=ra1)
result[i, ] <- c(theta[i], sigma2[i])
}
result=result[-(1:2000),]
par(mfrow=c(2,1))
hist(result[,1], xlab = "", main = expression(mu))
hist(result[,2], xlab = "", main = expression(sigma^2))
colSums(result)/8000
par(mfrow=c(2,1))
for (i in 1:2) {
x=result[,i]
estint=cumsum(x)/(1:8000)
esterr=sqrt(cumsum((x-estint)^2))/(1:8000)
plot(estint, xlab="Mean and error range",type="l",lwd=2,ylim=mean(x)+20*c(-esterr[8000],esterr[8000]),ylab="")
lines(estint+2*esterr,col="gold",lwd=2)
lines(estint-2*esterr,col="gold",lwd=2)
}
x=rnorm(100,0,1)
a = 3
b = 3
tau2 = 10
mu0 = 5
n=length(x)
Nsim=10000
result_mat = matrix(nrow = Nsim, ncol = 2)
x_bar=mean(x)
sigma2 = rep(0,Nsim)
sigma2[1]=1/rgamma(1,shape=a,rate=b)
B=sigma2[1]/(sigma2[1]+n*tau2)
mu = rep(0,Nsim)
mu[1]=rnorm(1,m=B*mu0+(1-B)*x_bar,sd=sqrt(tau2*B))
result_mat[1, ] = c(mu[1], sigma2[1])
for (i in 2:Nsim){
B=sigma2[i-1]/(sigma2[i-1]+n*tau2)
mu[i]=rnorm(1,m=B*mu0+(1-B)*x_bar,sd=sqrt(tau2*B))
ra1=(1/2)*(sum((x-mu[i])^2))+b
sigma2[i]=1/rgamma(1,shape=(n/2)+a,rate=ra1)
result_mat[i, ] <- c(mu[i], sigma2[i])
}
result_mat=result_mat[-(1:2000),]
par(mfrow=c(2,1))
hist(result_mat[,1], xlab = "", main = expression(mu))
hist(result_mat[,2], xlab = "", main = expression(sigma^2))
par(mfrow=c(2,1))
hist(result_mat[,1], xlab = "", main = "mu")
hist(result_mat[,2], xlab = "", main = "sigma^2")
colSums(result_mat)/8000
x=rnorm(100,0,1)
a = 3
b = 3
tau2 = 10
mu0 = 5
n=length(x)
Nsim=10000
result_mat = matrix(nrow = Nsim, ncol = 2)
x_bar=mean(x)
sigma2 = rep(0,Nsim)
sigma2[1]=1/rgamma(1,shape=a,rate=b)
B=sigma2[1]/(sigma2[1]+n*tau2)
mu = rep(0,Nsim)
mu[1]=rnorm(1,m=B*mu0+(1-B)*x_bar,sd=sqrt(tau2*B))
result_mat[1, ] = c(mu[1], sigma2[1])
for (i in 2:Nsim){
B=sigma2[i-1]/(sigma2[i-1]+n*tau2)
mu[i]=rnorm(1,m=B*mu0+(1-B)*x_bar,sd=sqrt(tau2*B))
ra1=(1/2)*(sum((x-mu[i])^2))+b
sigma2[i]=1/rgamma(1,shape=(n/2)+a,rate=ra1)
result_mat[i, ] <- c(mu[i], sigma2[i])
}
result_mat=result_mat[-(1:2500),]
colSums(result_mat)/7500
x=rnorm(100,0,1)
a = 3
b = 3
tau2 = 10
mu0 = 5
n=length(x)
Nsim=10000
result_mat = matrix(nrow = Nsim, ncol = 2)
x_bar=mean(x)
sigma2 = rep(0,Nsim)
sigma2[1]=1/rgamma(1,shape=a,rate=b)
B=sigma2[1]/(sigma2[1]+n*tau2)
mu = rep(0,Nsim)
mu[1]=rnorm(1,m=B*mu0+(1-B)*x_bar,sd=sqrt(tau2*B))
result_mat[1, ] = c(mu[1], sigma2[1])
for (i in 2:Nsim){
B=sigma2[i-1]/(sigma2[i-1]+n*tau2)
mu[i]=rnorm(1,m=B*mu0+(1-B)*x_bar,sd=sqrt(tau2*B))
sigma2[i]=1/rgamma(1,shape=(n/2)+a,rate=(1/2)*(sum((x-mu[i])^2))+b)
result_mat[i, ] <- c(mu[i], sigma2[i])
}
result_mat=result_mat[-(1:2500),]
colSums(result_mat)/7500
x=rnorm(100,0,1)
a = 3
b = 3
tau2 = 10
mu0 = 5
n=length(x)
Nsim=10000
result_mat = matrix(nrow = Nsim, ncol = 2)
x_bar=mean(x)
sigma2 = rep(0,Nsim)
sigma2[1]=1/rgamma(1,shape=a,rate=b)
B=sigma2[1]/(sigma2[1]+n*tau2)
mu = rep(0,Nsim)
mu[1]=rnorm(1,m=B*mu0+(1-B)*x_bar,sd=sqrt(tau2*B))
result_mat[1, ] = c(mu[1], sigma2[1])
for (i in 2:Nsim){
B=sigma2[i-1]/(sigma2[i-1]+n*tau2)
mu[i]=rnorm(1,m=B*mu0+(1-B)*x_bar,sd=sqrt(tau2*B))
sigma2[i]=1/rgamma(1,shape=(n/2)+a,rate=(1/2)*(sum((x-mu[i])^2))+b)
result_mat[i, ] <- c(mu[i], sigma2[i])
}
result_mat=result_mat[-(1:2500),]
colSums(result_mat)/7500
age = seq(23,40)
home_runs = c(1,18,36,38,38,38,21,45,48,31,35,40,36,33,37,35,12,6)
at_bats = c(34,367,568,562,584,544,513,541,548,354,514,534,528,549,552,522,390,148)
data_q4 = data.frame(home_runs,age,at_bats)
betapost=function (beta, data)
{
x = data[, 2]
n = data[, 3]
y = data[, 1]
beta0 = beta[1]
beta1 = beta[2]
beta2 = beta[3]
logf=function(x,n,y,beta0,beta1,beta2)
{
lp = beta0 + beta1 * x + beta2 * (x)^2
p = exp(lp)/(1 + exp(lp))
a=y * log(p) + (n - y) * log(1 - p)
}
return(sum(logf(x,n,y,beta0,beta1,beta2)))
}
x = data_q4[, 2]
n = data_q4[, 3]
y = data_q4[, 1]
response=cbind(y, n - y)
fit = laplace(betapost,c(0,0,0),data_q4)
fit
resp_fit=glm(response~poly(x,2),data_q4)
resp_fit=glm(response~poly(x,2),data_q4,family = binomial)
resp_fit
resp_fit=glm(response~x+x^2,data_q4,family = binomial)
resp_fit
resp_fit=glm(response~ x + x^2,data_q4,family = binomial)
resp_fit
x2=x^2
resp_fit=glm(response~ x + x2,data_q4,family = binomial)
resp_fit
fit
proposal=list(var=fit$var,scale=20 )
bayesfit=rwmetrop(logpost2,proposal,fit$mode,100000,data_q4)
bayesfit=rwmetrop(betapost,proposal,fit$mode,100000,data_q4)
length(x)
betapost=function (beta, data)
{
x = data[, 2]
n = data[, 3]
y = data[, 1]
beta0 = beta[1]
beta1 = beta[2]
beta2 = beta[3]
logf=function(x,n,y,beta0,beta1,beta2)
{
lp = beta0 + beta1 * x + beta2 * (x)^2
temp = c()
for (j in 1:length(x)) {
temp = lp[j]
small_val = -15
if(temp > small_val){
small_val = temp
}
temp[j] = small_val
}
p = exp(temp)/(1 + exp(temp))
return(y * log(p) + (n - y) * log(1 - p))
}
return(sum(logf(x,n,y,beta0,beta1,beta2)))
}
fit = laplace(betapost,c(0,0,0),data_q4)
betapost=function (beta, data)
{
x = data[, 2]
n = data[, 3]
y = data[, 1]
beta0 = beta[1]
beta1 = beta[2]
beta2 = beta[3]
logf=function(x,n,y,beta0,beta1,beta2)
{
lp = beta0 + beta1 * x + beta2 * (x)^2
temp = c()
for (j in 1:length(x)) {
temp = lp[j]
small_val = -15
if(temp > small_val){
small_val = temp
}
temp[j] = small_val
}
p = exp(temp)/(1 + exp(temp))
return(y * log(p) + (n - y) * log(1 - p))
}
return(sum(logf(x,n,y,beta0,beta1,beta2)))
}
fit = laplace(betapost,c(0,0,0),data_q4)
fit = laplace(betapost,c(-10,0,0),data_q4)
lp = beta0 + beta1 * x + beta2 * (x)^2
beta = c(30.4444,-0.9086,-42.9183)
beta0 = beta[1]
beta1 = beta[2]
beta2 = beta[3]
lp = beta0 + beta1 * x + beta2 * (x)^2
lp
lp[lp <= -15] = -14
lp
p = exp(lp)/(1 + exp(lp))
p
y * log(p) + (n - y) * log(1 - p)
betapost=function (beta, data)
{
x = data[, 2]
n = data[, 3]
y = data[, 1]
beta0 = beta[1]
beta1 = beta[2]
beta2 = beta[3]
logf=function(x,n,y,beta0,beta1,beta2)
{
lp = beta0 + beta1 * x + beta2 * (x)^2
lp[lp <= -15] = -14
p = exp(lp)/(1 + exp(lp))
return(y * log(p) + (n - y) * log(1 - p))
}
return(sum(logf(x,n,y,beta0,beta1,beta2)))
}
x = data_q4[, 2]
n = data_q4[, 3]
y = data_q4[, 1]
fit = laplace(betapost,c(-10,0,0),data_q4)
fit$mode
betapost=function (beta, data)
{
x = data[, 2]
n = data[, 3]
y = data[, 1]
beta0 = beta[1]
beta1 = beta[2]
beta2 = beta[3]
logf=function(x,n,y,beta0,beta1,beta2)
{
lp = beta0 + beta1 * x + beta2 * (x)^2
lp[lp <= -16] = -15
p = exp(lp)/(1 + exp(lp))
return(y * log(p) + (n - y) * log(1 - p))
}
return(sum(logf(x,n,y,beta0,beta1,beta2)))
}
fit = laplace(betapost,c(-10,0,0),data_q4)
beta = c(30.4444,-0.9086,-42.9183)
lp = beta0 + beta1 * x + beta2 * (x)^2
lp
lp[lp <= -16] = -15
lp
p = exp(lp)/(1 + exp(lp))
p
y * log(p) + (n - y) * log(1 - p)
betapost=function (beta, data)
{
x = data[, 2]
n = data[, 3]
y = data[, 1]
beta0 = beta[1]
beta1 = beta[2]
beta2 = beta[3]
logf=function(x,n,y,beta0,beta1,beta2)
{
lp = beta0 + beta1 * x + beta2 * (x)^2
lp[lp <= -100] = -10
p = exp(lp)/(1 + exp(lp))
return(y * log(p) + (n - y) * log(1 - p))
}
return(sum(logf(x,n,y,beta0,beta1,beta2)))
}
fit = laplace(betapost,c(-10,0,0),data_q4)
fit
fit = laplace(betapost,c(0,0,0),data_q4)
fit
resp_fit
bayesfit=rwmetrop(betapost,proposal,fit$mode,100000,data_q4)
lp = beta0 + beta1 * x + beta2 * (x)^2
lp[lp <= -100] = -10
p = exp(lp)/(1 + exp(lp))
p
y * log(p) + (n - y) * log(1 - p)
sum(logf(x,n,y,beta0,beta1,beta2))
logf=function(x,n,y,beta0,beta1,beta2)
{
lp = beta0 + beta1 * x + beta2 * (x)^2
lp[lp <= -100] = -10
p = exp(lp)/(1 + exp(lp))
return(y * log(p) + (n - y) * log(1 - p))
}
sum(logf(x,n,y,beta0,beta1,beta2))
age = seq(23,40)
home_runs = c(1,18,36,38,38,38,21,45,48,31,35,40,36,33,37,35,12,6)
at_bats = c(34,367,568,562,584,544,513,541,548,354,514,534,528,549,552,522,390,148)
data_q4 = data.frame(home_runs,age,at_bats)
betapost=function (beta, data)
{
x = data[, 2]
n = data[, 3]
y = data[, 1]
beta0 = beta[1]
beta1 = beta[2]
beta2 = beta[3]
logf=function(x,n,y,beta0,beta1,beta2)
{
lp = beta0 + beta1 * x + beta2 * (x)^2
p = exp(lp)/(1 + exp(lp))
return(y * log(p) + (n - y) * log(1 - p))
}
return(sum(logf(x,n,y,beta0,beta1,beta2)))
}
x = data_q4[, 2]
n = data_q4[, 3]
y = data_q4[, 1]
response=cbind(y, n - y)
x2=x^2
resp_fit=glm(response~ x + x2,data_q4,family = binomial)
fit = laplace(betapost,c(0,0,0),data_q4)
fit$mode
fit$var
proposal=list(var=fit$var,scale=20 )
bayesfit=rwmetrop(betapost,proposal,fit$mode,100000,data_q4)
resp_fit
par(mfrow=c(1,2))
boxplot(cv.error.5.logistic,xlab = "CV error")
boxplot(mse.logistic,xlab ="MSE")
i=NULL
for (i in 1:100){
# Generate Insignificant inputs uniform
Z=c()
for(k in 1:q)
Z = cbind(Z,runif(n=n, min=1, max=10))
colnames(Z)<-paste('Z',1:4,sep = "")
data <- data.frame(Y, X, Z)
#generate train and test
train_ind <- sample(n, size = floor(0.75 * n))
train <- data[train_ind, ]
test <- data[-train_ind, ]
#fit logistic model
glm.fit=glm(Y~.,data=train)
cv.error.5.logistic[i]=cv.glm(train,glm.fit,K=5)$delta[1]
pred.logistic <- predict(glm.fit, test)
pred.logistic = as.numeric(pred.logistic>=0.5)
mse.logistic[i] = mean((pred.logistic != test$Y))
}
par(mfrow=c(1,2))
boxplot(cv.error.5.logistic,xlab = "CV error")
boxplot(mse.logistic,xlab ="MSE")
p=5
n=1000
q=4
X=c()
for(i in 1:p)
X = cbind(X,runif(n=n, min=1, max=20))
betas=c(4,5,-4,5,-1,-4)
eq_x = betas[1] + betas[2]*X[,1] + betas[3]*X[,2] + betas[4]*X[,3] + betas[5]*X[,4] + betas[6]*X[,5]
pi_x <- exp(eq_x) / (1 + exp(eq_x))
Y <- as.numeric(pi_x>=0.5)
data <- data.frame(Y, X)
i=NULL
for (i in 1:100){
# Generate Insignificant inputs uniform
Z=c()
for(k in 1:q)
Z = cbind(Z,runif(n=n, min=1, max=10))
colnames(Z)<-paste('Z',1:4,sep = "")
data <- data.frame(Y, X, Z)
#generate train and test
train_ind <- sample(n, size = floor(0.75 * n))
train <- data[train_ind, ]
test <- data[-train_ind, ]
#fit logistic model
glm.fit=glm(Y~.,data=train)
cv.error.5.logistic[i]=cv.glm(train,glm.fit,K=5)$delta[1]
pred.logistic <- predict(glm.fit, test)
pred.logistic = as.numeric(pred.logistic>=0.5)
mse.logistic[i] = mean((pred.logistic != test$Y))
}
par(mfrow=c(1,2))
boxplot(cv.error.5.logistic,xlab = "CV error")
boxplot(mse.logistic,xlab ="MSE")
fit = laplace(betapost,c(0,0,0),data_q4)
fit$mode
fit$var
T_from_T = function (n, v)
{
vctr_1 = vector("numeric", n)
vctr_1[1] = 0
for (i in 2:n) {
y = rnorm(1)
aprob = min(1, (dt(y, v)*dt(vctr_1[i-1], 3))/dt(vctr_1[i-1], v)/dt(y, 3))
u = runif(1)
if (u < aprob)
vctr_1[i] = y
else
vctr_1[i] = vctr_1[i-1]
}
return(vctr_1)
}
t_vctr2 = T_from_T(n,6)
mean_dist_t = mean(t_vctr2)
mean_dist_t
mean_actual
vec_actual = rt(n, 6)
mean_actual = mean(vec_actual)
mean_dist_norm
mean_actual
n = 5000
T_from_Norm = function (n, v)
{
vctr_1 = vector("numeric", n)
vctr_1[1] = 1
for (i in 2:n) {
y = rnorm(1)
aprob = min(1, (dt(y, v)*dnorm(vctr_1[i-1]))/dt(vctr_1[i-1], v)/dnorm(y))
u = runif(1)
if (u < aprob)
vctr_1[i] = y
else
vctr_1[i] = vctr_1[i-1]
}
return(vctr_1)
}
t_vctr = T_from_Norm(n,6)
mean_dist_norm = mean(t_vctr)
vec_actual = rt(n, 6)
mean_actual = mean(vec_actual)
mean_dist_norm
mean_actual
vec_actual = rt(n, 6)
mean_actual = mean(vec_actual)
mean_actual
T_from_T = function (n, v)
{
vctr_1 = vector("numeric", n)
vctr_1[1] = 0
for (i in 2:n) {
y = rnorm(1)
aprob = min(1, (dt(y, v)*dt(vctr_1[i-1], 3))/dt(vctr_1[i-1], v)/dt(y, 3))
u = runif(1)
if (u < aprob)
vctr_1[i] = y
else
vctr_1[i] = vctr_1[i-1]
}
return(vctr_1)
}
t_vctr2 = T_from_T(n,6)
mean_dist_t = mean(t_vctr2)
mean_dist_t
mean_actual
for (i in 1:100){
# Generate Insignificant inputs uniform
Z=c()
for(k in 1:q)
Z = cbind(Z,runif(n=n, min=1, max=10))
colnames(Z)<-paste('Z',1:4,sep = "")
data <- data.frame(Y, X, Z)
#generate train and test
train_ind <- sample(n, size = floor(0.75 * n))
train <- data[train_ind, ]
test <- data[-train_ind, ]
#fit logistic model
glm.fit=glm(Y~.,data=train)
cv.error.5.logistic[i]=cv.glm(train,glm.fit,K=5)$delta[1]
pred.logistic <- predict(glm.fit, test)
pred.logistic = as.numeric(pred.logistic>=0.5)
mse.logistic[i] = mean((pred.logistic != test$Y))
}
par(mfrow=c(1,2))
boxplot(cv.error.5.logistic,xlab = "CV error")
boxplot(mse.logistic,xlab ="MSE")
par(mfrow=c(1,2))
boxplot(cv.error.5.lda,xlab = "CV error")
boxplot(mse.lda,xlab ="MSE")
source('~/Projects/STAT862/Final_stat862.R', echo=TRUE)
par(mfrow=c(1,2))
boxplot(cv.error.5.qda,xlab = "CV error")
boxplot(mse.qda,xlab ="MSE")
